{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","input","setInput","InputRef","useRef","useEffect","current","focus","handleClick","e","target","value","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","classname","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"8NA6DeA,MA1Df,SAAkBC,GAAQ,IAAD,EAEEC,mBAASD,EAAME,KAAOF,EAAME,KAAO,IAFrC,mBAElBC,EAFkB,KAEVC,EAFU,KAInBC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAc,SAAAC,GAChBP,EAASO,EAAEC,OAAOC,QAalB,OACI,sBAAMC,UAAU,YAAYC,SAXhB,SAAAJ,GAChBA,EAAEK,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAEVC,EAAS,KAIL,SACCJ,EAAME,KACH,qCACA,uBAAOoB,KAAK,OACZC,YAAc,mBACbV,MAAOV,EACNW,UAAU,kBACVU,KAAK,OACJC,SAAUf,EACNgB,IAAQrB,IAGf,wBAAQiB,KAAK,SAASR,UAAU,mBAAhC,uBAGZ,qCACY,uBAAOQ,KAAK,OACZC,YAAc,aACbV,MAAOV,EACNW,UAAU,aACVU,KAAK,OACJC,SAAUf,EACNgB,IAAQrB,IAGf,wBAAQiB,KAAK,SAASR,UAAU,cAAhC,uB,gBCfGa,MAhCf,YAAgE,IAAjDC,EAAgD,EAAhDA,MAAQC,EAAwC,EAAxCA,aAAeC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EAExC9B,mBAAS,CAC5BgB,GAAI,KACJJ,MAAO,KAJoD,mBAExDX,EAFwD,KAEnD8B,EAFmD,KAe/D,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUF,SATA,SAAAF,GACjBkB,EAAW7B,EAAKe,GAAIJ,GACpBmB,EAAQ,CACJf,GAAI,KACJJ,MAAO,MAK8BX,KAAMA,IAGxC0B,EAAMK,KAAI,SAACC,EAAOC,GAAR,OACrB,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACHiB,EAAKb,MADQa,EAAKjB,IAGf,sBAAKqB,UAAW,SAAhB,UACJ,cAAC,IAAD,CAAmBD,QAAW,kBAAMP,EAAWI,EAAKjB,KAAKH,UAAU,gBACnE,cAAC,IAAD,CAASA,UAAU,YAAYuB,QAAW,kBAAML,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAKJ,MAAOqB,EAAKb,eANVc,OCwB3DI,MA7Cf,WAAqB,IAAD,EAEStC,mBAAS,IAFlB,mBAET2B,EAFS,KAEHY,EAFG,KAoChB,OACI,gCACA,4DACI,cAAC,EAAD,CAAUzB,SAnCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQoB,KAAKP,EAAKO,MAAnC,CAIA,IAAMC,EAAQ,CAAIR,GAAJ,mBAAcN,IAC5Be,QAAQC,IAAIF,GACZF,EAASE,OA6BJ,cAAC,EAAD,CAAMd,MAAQA,EAAOC,aAdT,SAAAZ,GACjB,IAAI4B,EAAgBjB,EAAMK,KAAM,SAAAC,GAI5B,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXM,EAASK,IAO+Cf,WAnB1C,SAAAb,GACf,IAAM6B,EAAY,YAAIlB,GAAOmB,QAAO,SAAAb,GAAI,OAAIA,EAAKjB,KAAOA,KACxDuB,EAASM,IAiByEf,WA1BtE,SAACiB,EAAOC,GACnBA,EAAS5B,OAAQ,QAAQoB,KAAKQ,EAASR,OAG3CD,GAAS,SAAAU,GAAI,OAAIA,EAAKjB,KAAI,SAAAkB,GAAI,OAAKA,EAAKlC,KAAM+B,EAASC,EAAUE,eCTtDC,MATf,WACE,OACE,qBAAKtC,UAAU,WAAf,SACD,cAAC,EAAD,O,MCFHuC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.55e4b6b7.chunk.js","sourcesContent":["import React , {useState, useEffect , useRef} from 'react';\r\n\r\n\r\nfunction TodoForm(props) {\r\n\r\nconst [input , setInput] = useState(props.edit ? props.edit : '');\r\n\r\nconst InputRef = useRef(null);\r\n\r\nuseEffect(() => {\r\n    InputRef.current.focus();\r\n})\r\n\r\nconst handleClick = e => {\r\n    setInput(e.target.value);\r\n}\r\n\r\nconst handleSubmit= e =>{\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),\r\n        text: input\r\n    })\r\n    setInput('')\r\n}\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit} >\r\n        {props.edit ? (\r\n            <>\r\n            <input type=\"text\" \r\n            placeholder = \"Update your Todo\"\r\n             value={input}\r\n              className=\"todo-input edit\" \r\n              name=\"text\"\r\n               onChange={handleClick}\r\n                   ref = { InputRef}\r\n                   \r\n               />\r\n            <button type=\"submit\" className=\"todo-button edit\">Update</button>\r\n            </>\r\n        ) : (\r\n<>\r\n            <input type=\"text\" \r\n            placeholder = \"Add a Todo\"\r\n             value={input}\r\n              className=\"todo-input\" \r\n              name=\"text\"\r\n               onChange={handleClick}\r\n                   ref = { InputRef}\r\n                   \r\n               />\r\n            <button type=\"submit\" className=\"todo-button\">ADD</button>\r\n            </>\r\n        )}\r\n          \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\n\r\nfunction Todo({todos , completeTodo , removeTodo, updateTodo}) {\r\n\r\nconst [edit,setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n})\r\n\r\nconst submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n        id: null,\r\n        value: ''\r\n    })\r\n}\r\n\r\nif(edit.id){\r\n    return <TodoForm onSubmit={submitUpdate} edit={edit} /> \r\n}\r\n\r\n    return todos.map((todo , index) => (\r\n<div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key= {index}>\r\n    <div key={todo.id} onClick={() => completeTodo(todo.id)} >\r\n{todo.text}\r\n    </div>\r\n    <div classname= \" icons\">\r\n<RiCloseCircleLine onClick = {() => removeTodo(todo.id)} className=\"delete-todo\" />\r\n<TiEdit  className=\"edit-todo\" onClick = {() => setEdit({ id: todo.id , value: todo.text})} />\r\n    </div>\r\n</div>\r\n    ));\r\n}\r\n\r\nexport default Todo\r\n","import React , {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\n\r\nfunction TodoList() {\r\n\r\n    const [todos,setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.test)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo , ...todos];\r\n        console.log(newTodos)\r\n        setTodos(newTodos);\r\n    }\r\n\r\nconst updateTodo = (todoId,newValue) => {\r\n    if(!newValue.text || /^\\s*$/.test(newValue.test)) {\r\n        return;\r\n    }\r\n    setTodos(prev => prev.map(item => (item.id ===todoId ? newValue: item)));\r\n}\r\n\r\n   const removeTodo = id => {\r\n       const removeArr = [...todos].filter(todo => todo.id !== id);\r\n       setTodos(removeArr);\r\n   }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos  = todos.map ( todo => {\r\n            if(todo.id === id ){\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div> \r\n        <h1>What's the plan for Today?</h1>\r\n            <TodoForm onSubmit = {addTodo}/>\r\n             <Todo todos ={todos} completeTodo = {completeTodo} removeTodo ={removeTodo} updateTodo = {updateTodo}/> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport React from 'react';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n   <TodoList />\n   \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);"],"sourceRoot":""}